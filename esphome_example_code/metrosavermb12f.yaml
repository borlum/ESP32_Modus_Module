esphome:
  name: metrosavermb12f
  friendly_name: metrosavermb12f
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Metro Fallback Hotspot"
    password: ""

captive_portal:

uart:
  rx_pin: 20
  tx_pin: 21
  parity: none
  baud_rate: 9600
  id: uart_modbus
  stop_bits: 1
  
modbus:
  id: modbus_id
  flow_control_pin: 10
  uart_id: uart_modbus
  
modbus_controller:
  id: metro_modbus_controller
  address: 1
  modbus_id: modbus_id
  update_interval: 10s


# 40004-
# 40015-
# 40016-
# 40017-
# 40018-
# 40019-
# 43434-
# 45001
# 44137
# 44116
# 45171
# 47007
# 47011
# 47041
# 43005
# 47206
# 47540
# 48072
# 47209
# 47015
# 47019

sensor:

#########################
#### INPUT REGISTERS ####
#########################

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Outdoor temperature"
    id: metro_outdoor_temp_bt1
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    value_type: S_WORD
    address: 04
    filters:
      - multiply: 0.1
      
  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Return temperature"
    id: metro_return_temp_15_bt3
    unit_of_measurement: °C
    accuracy_decimals: 1
    register_type: read
    value_type: S_WORD
    address: 11
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Return temperature"
    id: metro_return_temp_14_bt3
    unit_of_measurement: °C
    accuracy_decimals: 1
    register_type: read
    value_type: S_WORD
    address: 12
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Evaporator inlet temperature"
    id: metro_evap_in_temp_bt10
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    value_type: S_WORD
    address: 15
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Evaporator outlet temperature"
    id: metro_evap_out_temp_bt11
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    value_type: S_WORD
    address: 16
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Condenser outlet temperature"
    id: metro_cond_out_temp_bt12
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    value_type: S_WORD
    address: 17
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "HotGas temperature"
    id: metro_hotgas_temp_bt14
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    value_type: S_WORD
    address: 18
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Liquid gas temperature"
    id: metro_liq_temp_bt15
    unit_of_measurement: °C
    accuracy_decimals: 1
    device_class: temperature
    register_type: read
    value_type: S_WORD
    address: 19
    filters:
      - multiply: 0.1


binary_sensor:
#########################
#### INPUT REGISTERS ####
#########################

  - platform: modbus_controller
    modbus_controller_id: metro_modbus_controller
    name: "Compressor status"
    id: metro_comp_status
    register_type: read
    address: 3434
    bitmask: 1


text_sensor:
  
  - platform: template
    name: "Compressor status"
    lambda: |-
      if (id(metro_comp_status).state) {
        return {"Running"};
      } else {
        return {"Stopped"};
      }  

